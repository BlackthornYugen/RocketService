//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RocketClient.RocketService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Rocket", Namespace="http://schemas.datacontract.org/2004/07/ExamPrep1")]
    [System.SerializableAttribute()]
    public partial class Rocket : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RocketClient.RocketService.Location LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RocketClient.RocketService.Location Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/ExamPrep1")]
    [System.SerializableAttribute()]
    public partial class Location : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TerestrialField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Terestrial {
            get {
                return this.TerestrialField;
            }
            set {
                if ((this.TerestrialField.Equals(value) != true)) {
                    this.TerestrialField = value;
                    this.RaisePropertyChanged("Terestrial");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NoAvailableLaunchpadFault", Namespace="http://schemas.datacontract.org/2004/07/ExamPrep1")]
    [System.SerializableAttribute()]
    public partial class NoAvailableLaunchpadFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Cargo", Namespace="http://schemas.datacontract.org/2004/07/ExamPrep1")]
    [System.SerializableAttribute()]
    public partial class Cargo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RocketClient.RocketService.Location LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RocketClient.RocketService.Location Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NoAvailableHangerFault", Namespace="http://schemas.datacontract.org/2004/07/ExamPrep1")]
    [System.SerializableAttribute()]
    public partial class NoAvailableHangerFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RocketService.IRocketService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IRocketService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRocketService/NewRocket", ReplyAction="http://tempuri.org/IRocketService/NewRocketResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RocketClient.RocketService.NoAvailableLaunchpadFault), Action="http://tempuri.org/IRocketService/NewRocketNoAvailableLaunchpadFaultFault", Name="NoAvailableLaunchpadFault", Namespace="http://schemas.datacontract.org/2004/07/ExamPrep1")]
        RocketClient.RocketService.Rocket NewRocket(RocketClient.RocketService.Rocket rocket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRocketService/NewRocket", ReplyAction="http://tempuri.org/IRocketService/NewRocketResponse")]
        System.Threading.Tasks.Task<RocketClient.RocketService.Rocket> NewRocketAsync(RocketClient.RocketService.Rocket rocket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRocketService/AccessExistingRocket", ReplyAction="http://tempuri.org/IRocketService/AccessExistingRocketResponse")]
        RocketClient.RocketService.Rocket AccessExistingRocket(int launchpadId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRocketService/AccessExistingRocket", ReplyAction="http://tempuri.org/IRocketService/AccessExistingRocketResponse")]
        System.Threading.Tasks.Task<RocketClient.RocketService.Rocket> AccessExistingRocketAsync(int launchpadId);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IRocketService/AddCargo", ReplyAction="http://tempuri.org/IRocketService/AddCargoResponse")]
        void AddCargo(RocketClient.RocketService.Cargo cargo);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IRocketService/AddCargo", ReplyAction="http://tempuri.org/IRocketService/AddCargoResponse")]
        System.Threading.Tasks.Task AddCargoAsync(RocketClient.RocketService.Cargo cargo);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IRocketService/RemoveCargo", ReplyAction="http://tempuri.org/IRocketService/RemoveCargoResponse")]
        void RemoveCargo(RocketClient.RocketService.Cargo cargo);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/IRocketService/RemoveCargo", ReplyAction="http://tempuri.org/IRocketService/RemoveCargoResponse")]
        System.Threading.Tasks.Task RemoveCargoAsync(RocketClient.RocketService.Cargo cargo);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IRocketService/LaunchActiveRocket", ReplyAction="http://tempuri.org/IRocketService/LaunchActiveRocketResponse")]
        void LaunchActiveRocket(RocketClient.RocketService.Location target);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IRocketService/LaunchActiveRocket", ReplyAction="http://tempuri.org/IRocketService/LaunchActiveRocketResponse")]
        System.Threading.Tasks.Task LaunchActiveRocketAsync(RocketClient.RocketService.Location target);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IRocketService/RemoveActiveRocket", ReplyAction="http://tempuri.org/IRocketService/RemoveActiveRocketResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(RocketClient.RocketService.NoAvailableHangerFault), Action="http://tempuri.org/IRocketService/RemoveActiveRocketNoAvailableHangerFaultFault", Name="NoAvailableHangerFault", Namespace="http://schemas.datacontract.org/2004/07/ExamPrep1")]
        void RemoveActiveRocket();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IRocketService/RemoveActiveRocket", ReplyAction="http://tempuri.org/IRocketService/RemoveActiveRocketResponse")]
        System.Threading.Tasks.Task RemoveActiveRocketAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRocketServiceChannel : RocketClient.RocketService.IRocketService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RocketServiceClient : System.ServiceModel.ClientBase<RocketClient.RocketService.IRocketService>, RocketClient.RocketService.IRocketService {
        
        public RocketServiceClient() {
        }
        
        public RocketServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RocketServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RocketServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RocketServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RocketClient.RocketService.Rocket NewRocket(RocketClient.RocketService.Rocket rocket) {
            return base.Channel.NewRocket(rocket);
        }
        
        public System.Threading.Tasks.Task<RocketClient.RocketService.Rocket> NewRocketAsync(RocketClient.RocketService.Rocket rocket) {
            return base.Channel.NewRocketAsync(rocket);
        }
        
        public RocketClient.RocketService.Rocket AccessExistingRocket(int launchpadId) {
            return base.Channel.AccessExistingRocket(launchpadId);
        }
        
        public System.Threading.Tasks.Task<RocketClient.RocketService.Rocket> AccessExistingRocketAsync(int launchpadId) {
            return base.Channel.AccessExistingRocketAsync(launchpadId);
        }
        
        public void AddCargo(RocketClient.RocketService.Cargo cargo) {
            base.Channel.AddCargo(cargo);
        }
        
        public System.Threading.Tasks.Task AddCargoAsync(RocketClient.RocketService.Cargo cargo) {
            return base.Channel.AddCargoAsync(cargo);
        }
        
        public void RemoveCargo(RocketClient.RocketService.Cargo cargo) {
            base.Channel.RemoveCargo(cargo);
        }
        
        public System.Threading.Tasks.Task RemoveCargoAsync(RocketClient.RocketService.Cargo cargo) {
            return base.Channel.RemoveCargoAsync(cargo);
        }
        
        public void LaunchActiveRocket(RocketClient.RocketService.Location target) {
            base.Channel.LaunchActiveRocket(target);
        }
        
        public System.Threading.Tasks.Task LaunchActiveRocketAsync(RocketClient.RocketService.Location target) {
            return base.Channel.LaunchActiveRocketAsync(target);
        }
        
        public void RemoveActiveRocket() {
            base.Channel.RemoveActiveRocket();
        }
        
        public System.Threading.Tasks.Task RemoveActiveRocketAsync() {
            return base.Channel.RemoveActiveRocketAsync();
        }
    }
}
